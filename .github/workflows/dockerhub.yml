name: Release CI → Auto-merge to main

on:
  push:
    branches: [ release ]
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write
  packages: write

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/orion

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Read version from pyproject.toml
        id: get_version
        shell: bash
        run: |
          python - <<'PY' > /tmp/out.txt
          import sys, pathlib
          try:
            import tomllib
          except ModuleNotFoundError:
            sys.exit("Python 3.11+ required for tomllib")
          data = tomllib.loads(pathlib.Path("pyproject.toml").read_text(encoding="utf-8"))
          v = (data.get("project") or {}).get("version") \
              or ((data.get("tool") or {}).get("poetry") or {}).get("version")
          if not v: sys.exit("Version not found in pyproject.toml")
          print(f"version={v}")
          PY
          cat /tmp/out.txt >> "$GITHUB_OUTPUT"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            docker.io/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}
            docker.io/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  open-pr-and-automerge:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Create or find PR release → main
        id: pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          number=$(gh pr list --base main --head release --state open --json number --jq '.[0].number')
          if [ -z "$number" ]; then
            gh pr create --base main --head release \
              --title "Release → main" \
              --body "Auto PR dari branch **release** ke **main** setelah CI lulus."
            number=$(gh pr list --base main --head release --state open --json number --jq '.[0].number')
          fi
          echo "PR_NUMBER=$number" >> "$GITHUB_ENV"

      - name: Enable auto-merge
        if: env.PR_NUMBER != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh pr merge "$PR_NUMBER" --merge --auto
