name: Release CI → Bump version → Auto-merge to main

on:
  push:
    branches: [ release ]
    paths:
      - '**/*.py'
      - 'pyproject.toml'
      - 'Dockerfile'
      - '.github/workflows/**'
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: release-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  bump-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      bumped: ${{ steps.bump.outputs.bumped }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Skip if last commit already bump
        id: skipcheck
        shell: bash
        run: |
          if git log -1 --pretty=%s | grep -qi "bump version"; then
            echo "already_bumped=true" >> $GITHUB_OUTPUT
          else
            echo "already_bumped=false" >> $GITHUB_OUTPUT
          fi

      - name: Bump patch version in pyproject.toml
        id: bump
        if: steps.skipcheck.outputs.already_bumped == 'false'
        shell: bash
        run: |
          python - <<'PY'
          import re, pathlib, sys
          p = pathlib.Path("pyproject.toml")
          text = p.read_text(encoding="utf-8")

          # Cari [project].version atau [tool.poetry].version
          m = re.search(r'(?m)^(version\s*=\s*")(\d+)\.(\d+)\.(\d+)(")', text)
          if not m:
              # fallback: cari di block [tool.poetry]
              m = re.search(r'(?m)^\s*version\s*=\s*"(\d+)\.(\d+)\.(\d+)"', text)
          if not m:
              sys.exit("Version not found (expected X.Y.Z)")

          if len(m.groups()) == 5:
              # [project] style with capture groups
              major, minor, patch = int(m.group(2)), int(m.group(3)), int(m.group(4))
              new = f'{major}.{minor}.{patch+1}'
              new_text = text[:m.start(2)] + str(major) + text[m.start(3)-1:m.start(3)] + str(minor) + text[m.start(4)-1:m.start(4)] + str(patch+1) + text[m.end(4):]
          else:
              major, minor, patch = map(int, m.groups())
              new = f'{major}.{minor}.{patch+1}'
              new_text = re.sub(r'(?m)^\s*version\s*=\s*"\d+\.\d+\.\d+"', f'version = "{new}"', text, count=1)

          p.write_text(new_text, encoding="utf-8")
          print(f"::set-output name=new_version::{new}")
          PY
          # GitHub deprecated set-output, gunakan GITHUB_OUTPUT:
          NEWV=$(python - <<'PY'
import re, pathlib
t=pathlib.Path("pyproject.toml").read_text()
m=re.search(r'(?m)^\s*version\s*=\s*"(\d+\.\d+\.\d+)"', t)
print(m.group(1) if m else "")
PY
)
          echo "new_version=$NEWV" >> $GITHUB_OUTPUT
          echo "bumped=true" >> $GITHUB_OUTPUT

      - name: Commit & push bump
        if: steps.bump.outputs.bumped == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add pyproject.toml
          git commit -m "chore(release): bump version to ${{ steps.bump.outputs.new_version }}"
          git push origin release

      - name: Pass through outputs when skipped
        if: steps.skipcheck.outputs.already_bumped == 'true'
        run: |
          echo "bumped=false" >> $GITHUB_OUTPUT

  build-test:
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image (no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: dummy/test:release-ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Tambah step test bila ada:
      # - uses: actions/setup-python@v5
      #   with: { python-version: '3.11' }
      # - run: |
      #     pip install -U pip
      #     pip install . pytest
      #     pytest -q

  open-pr-and-automerge:
    needs:
